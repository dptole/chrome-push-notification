<script type="text/javascript" src="https://www.gstatic.com/firebasejs/3.9.0/firebase-app.js"></script>
<script type="text/javascript" src="https://www.gstatic.com/firebasejs/3.9.0/firebase-messaging.js"></script>

<script type="text/javascript">
var service_worker_path = '/chrome_push_notification/fcm/sw.js'
  , cpn_notify_button = $('.cpn-notify-button')
  , error_message = $('.cpn-error-message')
  , firebase_config = {
      messagingSenderId: '{{ gcm_sender_id }}'
    }
;

firebase.initializeApp(firebase_config);
var messaging = firebase.messaging();

messaging.onTokenRefresh(function() {
  console.log('Token refreshed');
  console.log('Arguments (window.ar)');
  console.log(window.ar = arguments);
  return storeNewUserToken(true);
});

function registerServiceWorker(path) {
  return navigator.serviceWorker.getRegistrations().then(function(registrations) {
    var registered_sw = registrations.filter(function(registration) {
      return registration.active.scriptURL.endsWith(service_worker_path);
    });

    if(registered_sw.length > 0)
      return registered_sw[0];
    else
      return navigator.serviceWorker.register(service_worker_path);
  });
}

function ensureURL(url) {
  return /^https?:\/\//i.test(url) ? url : 'https://firebase.google.com/_static/images/firebase/touchicon-180.png';
}

function getRegistration() {
  return registerServiceWorker(service_worker_path);
}

function displayNotification(notification, registration) {
  if(notification.type === 'article') {
    const article = parseJSON(notification.article)
    if(article.success) {
      registration.showNotification(
        article.parsed.source,
        {
          body: [article.parsed.title, article.parsed.description].join(' | '),
          icon: ensureURL(article.parsed.urlToImage),
          tag: JSON.stringify({type: 'read-news', url: article.parsed.url}),
          actions: [{
            title: 'Read',
            action: JSON.stringify({type: 'read-news', url: article.parsed.url}),
            icon: 'https://cdn0.iconfinder.com/data/icons/solid-line-essential-ui-icon-set/512/essential_set_menu-32.png'
          }, {
            title: 'Next',
            action: JSON.stringify({type: 'next-news'}),
            icon: 'https://cdn3.iconfinder.com/data/icons/google-material-design-icons/48/ic_arrow_forward_48px-32.png'
          }]
        }
      )
    }
  }
}

function parseJSON(json_string) {
  try {
    return {
      success: true,
      parsed: JSON.parse(json_string)
    }
  } catch(error) {
    return {
      error
    }
  }
}

function storeNewUserToken(send_to_server) {
  return messaging.getToken().then(token =>
    createFullDatabase('sw-db', 1, [{
      name: 'swTokens',
      options: {
        autoIncrement: true
      }
    }]).then(event =>
      new Promise((resolve, reject) => {
        const db = event.result.target.result

        const addData = db =>
          objectStoreAdd(db, 'swTokens', {
            subscriptionId: token,
            createdAt: Date.now(),
            sendToServer: !!send_to_server,
            scope: location.toString()
          }).then(
            resolve.bind(null, event),
            reject
          )

        if(event.type === 'success')
          addData(db)
        else
          event.result.target.onsuccess = addData.bind(null, db)
      })
    ).then(() => {
      if(send_to_server) {
        const db = event.result.target.result
        objectStoreSearch(db, 'swTokens').then(results =>
          fetch('https://dptole.ngrok.io/chrome_push_notification/user_tokens?tokens=' + btoa(JSON.stringify(results)))
        )
      }
    })
  )
}

function createDatabase(name, version) {
  return new Promise((resolve, reject) => {
    const idb_open_request = indexedDB.open(name, version)

    idb_open_request.onerror = reject

    idb_open_request.onupgradeneeded = event =>
      resolve({
        type: 'upgradeneeded',
        result: event
      })

    idb_open_request.onsuccess = event =>
      resolve({
        type: 'success',
        result: event
      })
  })
}

function createFullDatabase(name, version, object_stores) {
  return createDatabase('sw-db').then(event => {
    if(event.type === 'upgradeneeded')
      return createObjectStores(event.result.target.result, object_stores).then(() =>
        event
      )
    else
      return event
  })
}

function createObjectStores(db, object_stores) {
  return new Promise((resolve, reject) => {
    db.onerror = reject
    try {
      object_stores.forEach(object_store =>
        db.createObjectStore(object_store.name, object_store.options)
      )

      resolve(db)
    } catch(error) {
      reject(error)
    }
  })
}

function objectStoreAdd(db, object_store_name, key, value) {
  return new Promise((resolve, reject) => {
    if(value === undefined) {
      value = key
      key = undefined
    }
    const transaction = db.transaction(object_store_name, 'readwrite')

    const object_store = transaction.objectStore(object_store_name)
    const object_store_request = object_store.add(value, key)
    object_store_request.onsuccess = resolve
    object_store_request.onerror = reject
  })
}

function objectStoreSearch(db, object_store_name, key, direction) {
  return new Promise((resolve, reject) => {
    const transaction = db.transaction([object_store_name])
    const object_store = transaction.objectStore(object_store_name)
    const object_store_request = object_store.openCursor(key, direction)
    const result = []
    object_store_request.onsuccess = function(event) {
      const cursor = event.target.result
      if(cursor) {
        result.push({
          key: cursor.key,
          value: cursor.value
        })
        cursor.continue()
      } else
        resolve(result)
    }
    object_store_request.onerror = reject
  })
}

function logError(error) {
  cleanError()
  error_message.append(
    $('<h3>An error occurred</h3>'),
    $('<div>').text(error && error.message || error)
  );
}

function cleanError() {
  error_message.text('');
}

function getToken() {
  var permission = Notification.permission;
  return messaging.requestPermission().then(function() {
    console.log('getting token');
    if(permission !== 'granted') storeNewUserToken();
    return messaging.getToken();
  });
}

var install = (function () {
  var installed = false;

  return function() {
    return installed
      ? Promise.resolve()
      : messaging.requestPermission().then(function() {
          return getRegistration();
        }).then(function(service_worker) {
          return messaging.useServiceWorker(service_worker);
        }).then(function() {
          installed = true;
          return storeNewUserToken();
        })
    ;
  }
})()

cpn_notify_button.text('Get news').removeClass('disabled');
cpn_notify_button.on('click', function() {
  cpn_notify_button.text('Loading...').addClass('disabled');
  cleanError();
  
  install().then(function() {
    return getToken();
  }).then(function(token) {
    return fetch('https://dptole.ngrok.io/chrome_push_notification/get_news?token=' + token);
  }).catch(function(error) {
    logError(error);
  }).then(function() {
    cpn_notify_button.text('Get news').removeClass('disabled');
  });
});
</script>
